AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy the Inventory Component of Antiope

Parameters:

  pBucketName:
    Description: Name of the bucket to hold the images
    Type: String

  pLambdaZipFile:
    Description: File Name for the lambdas
    Type: String
    Default: inventory.zip

  pAssumeRoleArn:
    Description: Arn Name of the Role the lambda needs to assume to do cross account Access
    Type: String
    Default: arn:aws:iam::*:role/Security-Audit

  pRoleName:
    Description: Default name of the AssumeRole to assume into accounts
    Type: String
    Default: Security-Audit

  pPayerAccountList:
    Description: Comma Delimited list of payer accounts to process
    Type: String

  pIamUserName:
    Type: String
    Description: <optional> IAM Username with access to the Inventory Bucket
    Default: NONE

  pExecutionRate:
    Description: How frequently the StepFunction should Run (As a CloudWatch ScheduleExpression)
    Type: String
    Default: rate(30 minutes)

  pTableReadUnits:
    Description: DynamoDB Table Read Units
    Type: Number
    Default: 5

  pTableWriteUnits:
    Description: DynamoDB Table Write Units
    Type: Number
    Default: 5

  pSmallLambdaSize:
    Description: Memory footprint for smaller Lambda
    Type: Number
    Default: 128

  pLargeLambdaSize:
    Description: Memory footprint for Lambdas processing lots of resources
    Type: Number
    Default: 768

Conditions:
  CreateIAMUser: !Not [ !Equals [ !Ref pIamUserName, "NONE"] ]

Resources:

  InventoryIAMUser:
    Condition: CreateIAMUser
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref pIamUserName
      Path: /
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName ]]
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'

  InventoryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
        - Sid: EmuLambdaTestTrust
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName ]]
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: DynamoAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !GetAtt AccountDBTable.Arn
            - !GetAtt VpcInventoryDBTable.Arn
            - !Sub "${VpcInventoryDBTable.Arn}/index/*"
            - !GetAtt HistoricalBillingDataTable.Arn
            - !Sub "${HistoricalBillingDataTable.Arn}/index/*"
            Action:
            - dynamodb:*
            Effect: Allow
      - PolicyName: SendEmails
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ses:*
            Resource: '*'
      - PolicyName: StartStepFunction
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - states:StartExecution
            Resource: '*'
      - PolicyName: AssumeCrossAccountRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sts:AssumeRole
            Resource: !Ref pAssumeRoleArn
      - PolicyName: PublishToSNS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sns:publish
            Resource:
              - !Ref TriggerAccountInventoryFunctionTopic
              - !Ref NewActiveAccountTopic
              - !Ref NewForeignAccountTopic
      - PolicyName: DataTableStream
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt AccountDBTable.StreamArn

  #
  # State Machine Functions
  #
  PullOrganizationDataLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-pull-organization-data"
      Description: AWS Lamdba to pull data from payer account into account table
      Handler: pull_organization_data.handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
          # Specific to this function
          TRIGGER_ACCOUNT_INVENTORY_ARN: !Ref TriggerAccountInventoryFunctionTopic
      # Tags inherited from Stack

  InventoryErrorHandlingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-error-handler"
      Description: Handle Errors generated by the aws-inventory system
      Handler: index.handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt InventoryLambdaRole.Arn
      Environment:
        Variables:
          INVENTORY_STACK_NAME: !Ref AWS::StackName
          CONFIG_FILE: "config.json"
          INVENTORY_BUCKET: !Ref pBucketName
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import boto3
          import json
          import logging
          import os
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Lambda main routine
          def handler(event, context):
              logger.info("Received event: " + json.dumps(event, sort_keys=True))

              sns_client = boto3.client('sns')
              sns_client.publish (
                TopicArn=os.environ['ALARM_TOPIC'],
                Message=json.dumps(event, sort_keys=True),
                Subject="{} Lambda Error".format(os.environ['INVENTORY_STACK_NAME'])
                )
              raise Exception(event['Cause'])
          ### End of Function

  CreateAccountReportLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-create-account-report"
      Description: Create an HTML Report with all the AWS Accounts
      Handler: report-accounts.handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pLargeLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  #
  # New Account Handling
  #
  NewAccountHandlerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-new_account_handler"
      Description: Function to Handle the discovery of new Accounts written to the Accounts DDB Table
      Handler: new_account_handler.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
          # Specific to this function
          ACTIVE_TOPIC: !Ref NewActiveAccountTopic
          FOREIGN_TOPIC: !Ref NewForeignAccountTopic
      # Tags inherited from Stack

  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: InventoryLambdaRole
    Properties:
      BatchSize: 25 #trigger one lambda per document
      Enabled: True
      EventSourceArn: !GetAtt AccountDBTable.StreamArn
      FunctionName: !GetAtt NewAccountHandlerLambdaFunction.Arn
      StartingPosition: LATEST #always start at the tail of the stream

  NewActiveAccountTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Notifications of a new AWS Account"

  NewForeignAccountTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Notifications for discovery of a foreign AWS Account"
  #
  # Parallel Execution Functions
  #
  VpcInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-vpc-inventory"
      Description: AWS Lamdba to populate a table with info on all VPCs
      Handler: inventory-vpc.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  ENIInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-eni-inventory"
      Description: AWS Lamdba to to inventory all public IPs & ENIs in an account
      Handler: inventory-eni.lambda_handler
      Runtime: python3.6
      Timeout: 600
      MemorySize: !Ref pLargeLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  HealthInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-health-inventory"
      Description: AWS Lamdba to to inventory Health Dashboard results
      Handler: inventory-health-report.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  # StackInventoryLambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "${AWS::StackName}-stack-inventory"
  #     Description: Inventory the CF Stacks for the specific account
  #     Handler: inventory_stacks.handler
  #     Runtime: python3.6
  #     Timeout: 300
  #     MemorySize: !Ref pSmallLambdaSize
  #     Role: !GetAtt InventoryLambdaRole.Arn
  #     Code:
  #       S3Bucket: !Ref pBucketName
  #       S3Key: !Sub ${pLambdaZipFile}
  #     Environment:
  #       Variables:
  #         # ACCOUNT_TABLE: !Ref AccountDBTable
  #         DEFAULT_ROLE_NAME: !Ref pRoleName
  #         INVENTORY_STACK_NAME: !Ref AWS::StackName
  #         CONFIG_FILE: "config.json"
  #         INVENTORY_BUCKET: !Ref pBucketName
  #     # Tags inherited from Stack

  InstancesSecurityGroupsInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-instances-sg-inventory"
      Description: Inventory instances and security groups to a JSON file in S3
      Handler: inventory-instances-sg.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pLargeLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  GetBillingDataLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-billing-data"
      Description: Pull the spend from the AWS account
      Handler: get_billing_data.handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
          # Specific to this function
          BILLING_TABLE: !Ref HistoricalBillingDataTable

  Route53InventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-route53-inventory"
      Description: Inventory Route 53 Domains & Zones
      Handler: inventory-route53.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  BucketInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-bucket-inventory"
      Description: Inventory S3 Buckets and their attributes
      Handler: inventory-buckets.lambda_handler
      Runtime: python3.6
      Timeout: 600
      MemorySize: !Ref pLargeLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  IAMInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-iam-inventory"
      Description: Inventory IAM Roles & Users
      Handler: inventory-iam.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  ECSInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ecs-inventory"
      Description: Inventory ECS Clusters & Tasks
      Handler: inventory-ecs.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  CloudTrailInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-cloudtrail-inventory"
      Description: Inventory CloudTrails
      Handler: inventory-cloudtrail.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  ElasticSearchInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-es-inventory"
      Description: Inventory ElasticSearch Service Domains
      Handler: inventory-es.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  SecretsManagerInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-secrets-inventory"
      Description: Inventory Secrets Manager Secrets
      Handler: inventory-secrets.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack

  ECRInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ecr-inventory"
      Description: Inventory ECR Repos and Images
      Handler: inventory-ecr.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack


  LambdasInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-lambdas-inventory"
      Description: Inventory Lambdas Functions
      Handler: inventory-lambdas.lambda_handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref AccountDBTable
          VPC_TABLE: !Ref VpcInventoryDBTable
          ROLE_NAME: !Ref pRoleName
      # Tags inherited from Stack



  #
  # StateMachine
  #
  TriggerStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ExecuteStateMachine
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - states:StartExecution
            Effect: Allow
            Resource:
              - !Ref InventoryProcessStateMachine

  TriggerStateMachine:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Trigger the state machine to gather inventory data"
      ScheduleExpression: !Ref pExecutionRate
      Targets:
      - Arn: !Ref InventoryProcessStateMachine
        RoleArn: !GetAtt TriggerStateMachineRole.Arn
        Id: TargetFunctionV1
        Input: !Sub |
          {"payer": [ ${pPayerAccountList} ]}

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !GetAtt PullOrganizationDataLambdaFunction.Arn
              - !GetAtt CreateAccountReportLambdaFunction.Arn

      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow

  InventoryProcessStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      StateMachineName: !Ref AWS::StackName
      DefinitionString: !Sub |-
        {
          "Comment": "(${AWS::StackName}) State Machine to Gather Account Inventory Information",
          "StartAt": "PullOrganizationDataLambdaFunction",
          "States": {
            "ErrorHandlerState": {
              "Type": "Task",
              "Resource": "${InventoryErrorHandlingLambdaFunction.Arn}" ,
              "End": true
            },
            "PullOrganizationDataLambdaFunction": {
              "Type": "Task",
              "Resource": "${PullOrganizationDataLambdaFunction.Arn}",
              "Next": "WaitForLambdaExecutionsToComplete",
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "ErrorHandlerState"
              }]
            },
            "WaitForLambdaExecutionsToComplete": {
              "Type": "Wait",
              "Seconds": 300,
              "Next": "CreateAccountReportLambdaFunction"
            },
            "CreateAccountReportLambdaFunction": {
              "Type": "Task",
              "Resource": "${CreateAccountReportLambdaFunction.Arn}",
              "End": true,
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "ErrorHandlerState"
              }]
            }
          }
        }

  #
  # Topic & Subscriptions
  #
  TriggerAccountInventoryFunctionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Triggers the Inventory of each Account for ${AWS::StackName}"

  VpcInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt VpcInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  VpcInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [VpcInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  ENIInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ENIInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  ENIInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [ENIInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  HealthInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HealthInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  HealthInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [HealthInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  # StackInventoryLambdaFunctionPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt StackInventoryLambdaFunction.Arn
  #     Principal: sns.amazonaws.com
  #     SourceArn: !Ref TriggerAccountInventoryFunctionTopic
  #     Action: lambda:invokeFunction

  # StackInventoryTopicToLambdaSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: !GetAtt [StackInventoryLambdaFunction, Arn]
  #     Protocol: lambda
  #     TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  InstancesSecurityGroupsInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InstancesSecurityGroupsInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  InstancesSecurityGroupsInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [InstancesSecurityGroupsInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  GetBillingDataLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetBillingDataLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  GetBillingDataInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [GetBillingDataLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  Route53InventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Route53InventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  Route53InventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [Route53InventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  BucketInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BucketInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  BucketInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [BucketInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  IAMInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IAMInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  IAMInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [IAMInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  ECSnventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ECSInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  ECSInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [ECSInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  CloudTrailInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CloudTrailInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  CloudTrailInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [CloudTrailInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  ElasticSearchInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ElasticSearchInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  ElasticSearchInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [ElasticSearchInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  SecretsManagerInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SecretsManagerInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  SecretsManagerInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [SecretsManagerInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  ECRInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ECRInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  ECRInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [ECRInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'

  LambdasInventoryLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdasInventoryLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerAccountInventoryFunctionTopic
      Action: lambda:invokeFunction

  LambdasInventoryTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt [LambdasInventoryLambdaFunction, Arn]
      Protocol: lambda
      TopicArn: !Ref 'TriggerAccountInventoryFunctionTopic'



  #
  # DynamoDB Tables
  #

  # This table has a 1-1 mapping of data from the AWS Organization(s) from each payer
  AccountDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-accounts"
      AttributeDefinitions:
        - AttributeName: "account_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "account_id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref pTableReadUnits
        WriteCapacityUnits: !Ref pTableWriteUnits
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  # This table stores the vpc inventory
  VpcInventoryDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-vpc-inventory"
      AttributeDefinitions:
        - AttributeName: "vpc_id"
          AttributeType: "S"
        - AttributeName: "account_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "vpc_id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref pTableReadUnits
        WriteCapacityUnits: !Ref pTableWriteUnits
      GlobalSecondaryIndexes:
      - IndexName: "account-index"
        KeySchema:
          - AttributeName: "account_id"
            KeyType: "HASH"
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: !Ref pTableReadUnits
          WriteCapacityUnits: !Ref pTableWriteUnits

  HistoricalBillingDataTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-billing-data"
      AttributeDefinitions:
        - AttributeName: "account_id"
          AttributeType: "S"
        - AttributeName: "datetime"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "account_id"
          KeyType: "HASH"
        - AttributeName: "datetime"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref pTableReadUnits
        WriteCapacityUnits: !Ref pTableWriteUnits


  #
  # Dashboard
  #
  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody: !Sub |-
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 24,
              "height": 9,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${AWS::StackName}-pull-organization-data", { "stat": "Sum", "period": 604800, "label": "pull-organization-data"} ],
                  [ "...", "${AWS::StackName}-instances-sg-inventory", { "stat": "Sum", "period": 604800, "label": "instances-securitygroups-inventory" } ],
                  [ "...", "${AWS::StackName}-get-billing-data", { "stat": "Sum", "period": 604800, "label": "get-billing-data" } ],
                  [ "...", "${AWS::StackName}-health-inventory", { "stat": "Sum", "period": 604800, "label": "health-inventory" } ],
                  [ "...", "${AWS::StackName}-eni-inventory", { "stat": "Sum", "period": 604800, "label": "eni-inventory" } ],
                  [ "...", "${AWS::StackName}-vpc-inventory", { "stat": "Sum", "period": 604800, "label": "vpc-inventory" } ],
                  [ "...", "${AWS::StackName}-route53-inventory", { "stat": "Sum", "period": 604800, "label": "route53-inventory" } ],
                  [ "...", "${AWS::StackName}-bucket-inventory", { "stat": "Sum", "period": 604800, "label": "bucket-inventory" } ],
                  [ "...", "${AWS::StackName}-iam-inventory", { "stat": "Sum", "period": 604800, "label": "iam-inventory" } ],
                  [ "...", "${AWS::StackName}-ecs-inventory", { "stat": "Sum", "period": 604800, "label": "ecs-inventory" } ],
                  [ "...", "${AWS::StackName}-es-inventory", { "stat": "Sum", "period": 604800, "label": "es-inventory" } ],
                  [ "...", "${AWS::StackName}-secrets-inventory", { "stat": "Sum", "period": 604800, "label": "secrets-inventory" } ],
                  [ "...", "${AWS::StackName}-ecr-inventory", { "stat": "Sum", "period": 604800, "label": "ecr-inventory" } ],
                  [ "...", "${AWS::StackName}-lambdas-inventory", { "stat": "Sum", "period": 604800, "label": "lambdas-inventory" } ],
                  [ "...", "${AWS::StackName}-cloudtrail-inventory", { "stat": "Sum", "period": 604800, "label": "cloudtrail-inventory" } ],
                  [ "...", "${AWS::StackName}-create-account-report", { "stat": "Sum", "period": 604800, "label": "create-account-report" } ],
                  [ "...", "${AWS::StackName}-new_account_handler", { "stat": "Sum", "period": 604800, "label": "new_account_handler" } ],
                  [ "...", "${AWS::StackName}-error-handler", { "stat": "Sum", "period": 604800, "label": "error-handler" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Invocation",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 9,
              "width": 24,
              "height": 9,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${AWS::StackName}-pull-organization-data", { "stat": "Sum", "period": 604800, "label": "pull-organization-data"} ],
                  [ "...", "${AWS::StackName}-instances-sg-inventory", { "stat": "Sum", "period": 604800, "label": "instances-securitygroups-inventory" } ],
                  [ "...", "${AWS::StackName}-get-billing-data", { "stat": "Sum", "period": 604800, "label": "get-billing-data" } ],
                  [ "...", "${AWS::StackName}-health-inventory", { "stat": "Sum", "period": 604800, "label": "health-inventory" } ],
                  [ "...", "${AWS::StackName}-eni-inventory", { "stat": "Sum", "period": 604800, "label": "eni-inventory" } ],
                  [ "...", "${AWS::StackName}-vpc-inventory", { "stat": "Sum", "period": 604800, "label": "vpc-inventory" } ],
                  [ "...", "${AWS::StackName}-route53-inventory", { "stat": "Sum", "period": 604800, "label": "route53-inventory" } ],
                  [ "...", "${AWS::StackName}-bucket-inventory", { "stat": "Sum", "period": 604800, "label": "bucket-inventory" } ],
                  [ "...", "${AWS::StackName}-iam-inventory", { "stat": "Sum", "period": 604800, "label": "iam-inventory" } ],
                  [ "...", "${AWS::StackName}-ecs-inventory", { "stat": "Sum", "period": 604800, "label": "ecs-inventory" } ],
                  [ "...", "${AWS::StackName}-es-inventory", { "stat": "Sum", "period": 604800, "label": "es-inventory" } ],
                  [ "...", "${AWS::StackName}-secrets-inventory", { "stat": "Sum", "period": 604800, "label": "secrets-inventory" } ],
                  [ "...", "${AWS::StackName}-ecr-inventory", { "stat": "Sum", "period": 604800, "label": "ecr-inventory" } ],
                  [ "...", "${AWS::StackName}-lambdas-inventory", { "stat": "Sum", "period": 604800, "label": "lambdas-inventory" } ],
                  [ "...", "${AWS::StackName}-cloudtrail-inventory", { "stat": "Sum", "period": 604800, "label": "cloudtrail-inventory" } ],
                  [ "...", "${AWS::StackName}-create-account-report", { "stat": "Sum", "period": 604800, "label": "create-account-report" } ],
                  [ "...", "${AWS::StackName}-new_account_handler", { "stat": "Sum", "period": 604800, "label": "new_account_handler" } ],
                  [ "...", "${AWS::StackName}-error-handler", { "stat": "Sum", "period": 604800, "label": "error-handler" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 18,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/States", "ExecutionsStarted", "StateMachineArn", "${InventoryProcessStateMachine}", { "stat": "Sum", "period": 604800, "label": "Started" } ],
                  [ ".", "ExecutionsSucceeded", ".", ".", { "stat": "Sum", "period": 604800, "label": "Succeeded" } ],
                  [ ".", "ExecutionsFailed", ".", ".", { "stat": "Sum", "period": 604800, "label": "Failed" } ]
                ],
                "region": "${AWS::Region}",
                "title": "StateMachine Executions",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 24,
              "width": 24,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/DynamoDB", "ThrottledRequests", "TableName", "${AccountDBTable}", "Operation", "UpdateItem", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/DynamoDB", "ThrottledRequests", "TableName", "${VpcInventoryDBTable}", "Operation", "UpdateItem", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/DynamoDB", "ThrottledRequests", "TableName", "${HistoricalBillingDataTable}", "Operation", "UpdateItem", { "stat": "Sum", "period": 300 } ]
                ],
                "region": "${AWS::Region}",
                "title": "DDB Throttling"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 21,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/States", "ExecutionTime", "StateMachineArn", "${InventoryProcessStateMachine}", { "stat": "Sum", "period": 300 } ]
                ],
                "region": "${AWS::Region}",
                "annotations": {
                  "horizontal": [{"label": "10Min", "value": 600000 }]
                },
                "title": "State Machine ExecutionTime",
                "period": 300,
                "yAxis": {"left": {"min": 0 } }
              }
            },
            {
              "title": "DynamoDB Activity",
              "type": "metric",
              "x": 0,
              "y": 27,
              "width": 24,
              "height": 9,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${AccountDBTable}", { "stat": "Sum", "period": 60 } ],
                  [ ".", "ConsumedWriteCapacityUnits", "TableName", "${AccountDBTable}", { "stat": "Sum", "period": 60 } ],
                  [ ".", "ConsumedReadCapacityUnits", "TableName", "${VpcInventoryDBTable}", { "stat": "Sum", "period": 60 } ],
                  [ ".", "ConsumedWriteCapacityUnits", "TableName", "${VpcInventoryDBTable}", { "stat": "Sum", "period": 60 } ],
                  [ ".", "ConsumedReadCapacityUnits", "TableName", "${HistoricalBillingDataTable}", { "stat": "Sum", "period": 60 } ],
                  [ ".", "ConsumedWriteCapacityUnits", "TableName", "${HistoricalBillingDataTable}", { "stat": "Sum", "period": 60 } ]
                ],
                "region": "${AWS::Region}",
                "title": "DynamoDB Activity",
                "period": 300
              }
            },
            {
              "type": "text",
              "x": 12,
              "y": 21,
              "width": 6,
              "height": 3,
              "properties": {
                "markdown": "\n# Quick Links\n* [StateMachine](https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${InventoryProcessStateMachine})\n* [S3 Bucket](https://s3.console.aws.amazon.com/s3/buckets/${pBucketName}/?region=${AWS::Region}&tab=overview)\n* [Trigger Event](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#rules:name=${TriggerStateMachine})"
              }
            },
            {
              "type": "text",
              "x": 18,
              "y": 21,
              "width": 6,
              "height": 3,
              "properties": {
                "markdown": "\n# Tables\n* [Accounts](\nhttps://console.aws.amazon.com/dynamodb/home?region=${AWS::Region}#tables:selected=${AccountDBTable})\n* [VPCs](https://console.aws.amazon.com/dynamodb/home?region=${AWS::Region}#tables:selected=${VpcInventoryDBTable})\n* [BillingData](https://console.aws.amazon.com/dynamodb/home?region=${AWS::Region}#tables:selected=${HistoricalBillingDataTable})\n"
              }
            },
            {
              "type": "text",
              "x": 12,
              "y": 18,
              "width": 12,
              "height": 3,
              "styles": "undefined",
              "properties": {
                  "markdown": "\n# Stack Info\n* **Deploy Package**: ${pLambdaZipFile}\n* **Execution Schedule**: ${pExecutionRate} (GMT)\n"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 36,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [[ "AWS/S3", "BucketSizeBytes", "StorageType", "StandardStorage", "BucketName", "${pBucketName}", { "period": 86400 } ] ],
                "region": "us-east-1",
                "yAxis": {"left": {"min": 0 } },
                "title": "Inventory Storage Used"
                }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 36,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [[ "AWS/S3", "NumberOfObjects", "StorageType", "AllStorageTypes", "BucketName", "${pBucketName}", { "period": 86400 } ] ],
                "region": "us-east-1",
                "yAxis": {"left": {"min": 0 } },
                "title": "Inventory Object Count"
              }
            }
          ]
        }


Outputs:
  StackName:
    Value: !Ref AWS::StackName
  InventoryStackVersion:
    Value: !Ref pLambdaZipFile
  InventoryTriggerTopic:
    Value: !Ref TriggerAccountInventoryFunctionTopic
  NewAccountNotificationTopic:
    Value: !Ref NewActiveAccountTopic
  ForeignAccountNotificationTopic:
    Value: !Ref NewForeignAccountTopic
